"""
Django settings for E_djangoProject project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import datetime
import os
import sys
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.insert(0, BASE_DIR)
sys.path.insert(0, os.path.join(BASE_DIR, 'api'))
sys.path.insert(0, os.path.join(BASE_DIR, 'api/shop'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-))!8t^c6zppgb!pb-@*^i)*hj@#w%n*irrk^emy*+%etjf18mn'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# 自定义用户模型
AUTH_USER_MODEL = 'users.UserInfo'

# Application definition

INSTALLED_APPS = [
    'simpleui',  # 导入simpleui
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',  # 导入rest_framework
    'django_filters',  # 导入django_filters
    "ninja",  # 导入ninja
    'ninja_extra',  # 导入ninja_extra
    'ninja_jwt',  # 导入ninja_jwt
    'api.users',  # 导入users应用
    'api.forum',  # 导入forum应用
    'api.appointment',  # 导入appointment应用
    'api.shop.goods',  # 导入goods应用
    'api.shop.trades',  # 导入trades应用
    'corsheaders',  # 导入corsheaders，跨域请求
    'django_celery_beat',  # 导入django_celery_beat，定时任务
    # 'django_celery_results',  # 导入django_celery_results，celery结果存储
    'celery',  # 导入celery，异步任务

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # 导入corsheaders中间件
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'E_djangoProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'E_djangoProject.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'e_database',
        'USER': 'root',
        'PASSWORD': 'eCutePet',
        'HOST': '127.0.0.1',
        'PORT': '3306'
    }
}

# django 缓存
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_TZ = False

USE_I18N = True

USE_L10N = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
if DEBUG:
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, "static"),
    ]
else:
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# 媒体文件配置
MEDIA_ROOT = os.path.join(BASE_DIR, 'static/media')
MEDIA_URL = '/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
# 邮箱配置
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.163.com'  # QQ邮箱的smtp服务器
EMAIL_PORT = 465  # 端口为465或587
EMAIL_USE_SSL = True  # SSL加密方式设置为True
EMAIL_HOST_USER = 'eCutePet@163.com'  # 这里是你的邮箱账号
EMAIL_HOST_PASSWORD = 'VJUCALQHSOUBURGW'  # 注意这里使用申请的设备授权码。
EMAIL_FROM = 'E萌宠官方<eCutePet@163.com>'

# 全局配置
REST_FRAMEWORK = {
    # 匿名用户
    'UNAUTHENTICATED_USER': None,
}

# 第三方登录配置
AUTHENTICATION_BACKENDS = (
    'api.users.views.CustomBackend',  # 自定义用户登录
    'django.contrib.auth.backends.ModelBackend',
)

# 文档配置
SWAGGER_SETTINGS = {
    "USE_SESSION_AUTH": False,
    "api_version": "0.1",
    "SECURITY_DEFINITIONS": {
        "api_key": {"type": "apiKey", "name": "Authorization", "in": "header"},
    },
}

# ninja配置
NINJA_JWT = {
    # 采用的认证方式：JWT Sliding tokens
    "AUTH_TOKEN_CLASSES": ("ninja_jwt.tokens.SlidingToken",),
    "SLIDING_TOKEN_LIFETIME": datetime.timedelta(hours=5),  # 令牌的有效期为5h
    "SLIDING_TOKEN_REFRESH_LIFETIME": datetime.timedelta(days=1),  # 刷新令牌的有效期为1day
    'UPDATE_LAST_LOGIN': True,  # 登录成功后更新用户最后登录时间
}

# simpleui配置
SIMPLEUI_HOME_INFO = False  # 关闭首页广告
SIMPLEUI_ANALYSIS = False
SIMPLEUI_LOGO = '/static/logo.png'

# corsheaders配置
CORS_ALLOWED_ORIGINS = [
    'http://localhost:8080',  # Vue.js前端应用的地址
]
# 跨域
CORS_ORIGIN_WHITELIST = (
    'http://127.0.0.1:8080',
    'http://localhost:8080',
)
CORS_ALLOW_CREDENTIALS = True  # 允许携带cookie

# celery beat配置
# CELERY_ENABLE_UTC = False
CELERY_TIMEZONE = TIME_ZONE
# celery beat配置（周期性任务设置）
CELERY_ENABLE_UTC = False
DJANGO_CELERY_BEAT_TZ_AWARE = False
# 配置 celery 定时任务使用的调度器，使用django_celery_beat插件用来动态配置任务这里是下划线_，不是连字符-
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers.DatabaseScheduler'
# 设置代理人broker
CELERY_BROKER_URL = 'redis://127.0.0.1:6379/0'
# 指定 Backend
CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/1'
# CELERY_RESULT_BACKEND = "django-db"  # 如果使用django-db作为结果后端，则不需要配置CELERY_RESULT_BACKEND
# celery内容等消息的格式设置，默认json
CELERY_ACCEPT_CONTENT = ['application/json', ]
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# celery 的启动工作数量设置
CELERY_WORKER_CONCURRENCY = 10
# 任务预取功能，会尽量多拿 n 个，以保证获取的通讯成本可以压缩。
CELERYD_PREFETCH_MULTIPLIER = 20
# 有些情况下可以防止死锁
CELERYD_FORCE_EXECV = True
# celery 的 worker 执行多少个任务后进行重启操作
CELERY_WORKER_MAX_TASKS_PER_CHILD = 100
# 禁用所有速度限制，如果网络资源有限，不建议开足马力。
CELERY_DISABLE_RATE_LIMITS = True
CELERY_RESULT_EXPIRES = 86400  # 任务结果过期时间，单位为秒，默认为1天
